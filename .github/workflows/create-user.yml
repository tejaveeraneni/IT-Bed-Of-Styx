name: Create New User from Issue Form # Name for defining the workflow

on: # Trigger the workflow when an issue is opened
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs: # Make a create-user job that runs on the latest version of windows
  create-user:
    runs-on: windows-latest
    # Trigger if issue has "user" label OR if the issue title contains "Create a New User"
    if: contains(github.event.issue.title, 'Create a New User')

    steps: # The first step is to download all the repository code and use the checkout action for that download
       - name: Checkout repository
         uses: actions/checkout@v4

       - name: Parse Issue Form Data # The second step is to parse the data from the form using github-script to run Javascript directly with the Github API
         id: parse
         uses: actions/github-script@v7
         with:
          script: |
            const issueBody = context.payload.issue.body; // Get the body and text of the issue generated when it's created
            console.log("Issue body:", issueBody);

            const parseFormField = (body, fieldName) => { // Look for ### FieldName followed by content until the next ###, double newline, or end of string
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)\\s*(?=\\n###|\\n\\n|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };

            const parseDropDown = (body, fieldName) => { // Look for ### FieldName followed by content until the next ###, double newline, or end of string
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)\\s*(?=\\n###|\\n\\n|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };

            const parseCheckboxes = (body, fieldName) => { // Looks for ### FieldName followed by a checked checkbox - [x] and captures that option
              const regex = new RegExp(`### ${fieldName}[\\s\\S]*?\\n- \\[x\\] (.+?)\\s*(?=\\n###|\\n\\n|\\n- \\[|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : 'No';
            };

            const firstName = parseFormField(issueBody, 'First Name'); // Parse the form fields from the issue body
            const lastName = parseFormField(issueBody, 'Last Name');
            const location = parseDropDown(issueBody, 'Location');
            const jobTitle = parseFormField(issueBody, 'Job Title');
            const phoneNumber = parseFormField(issueBody, 'Phone Number');
            const VPNAccess = parseCheckboxes(issueBody, 'VPN Access Requirements');

            console.log("Parsed data: ", {
              firstName, lastName, location, jobTitle, phoneNumber, VPNAccess
            });

            core.setOutput('firstName', firstName); // setOutput is used to pass the data into key-value pairs that can be accessed in later steps
            core.setOutput('lastName', lastName);
            core.setOutput('location', location);
            core.setOutput('jobTitle', jobTitle);
            core.setOutput('phoneNumber', phoneNumber);
            core.setOutput('VPNAccess', VPNAccess);

            // Validate required fields


            const missingFields = [];
            if (!firstName) missingFields.push('First Name');
            if (!lastName) missingFields.push('Last Name');
            if (!location) missingFields.push('Location');

            if (missingFields.length > 0) {
              core.setFailed(`Missing required fields: ${missingFields.join(', ')}`);
            }

       - name: Create a CSV File with the User Details
         run: |
            $DisplayName = "${{steps.parse.outputs.firstName}}.${{steps.parse.outputs.lastName}}"

            $FirstNameFirstWord = ($"${{steps.parse.outputs.firstName}}" -split '\s+')[0].ToLower()
            $LastNameLastWord = ($"${{steps.parse.outputs.lastName}}" -split '\s+')[-1].ToLower()
            $MailNickname = "$FirstNameFirstWord.$LastNameLastWord"

            $csvContent = @"
            FirstName,LastName,JobTitle,PhoneNumber,DisplayName,MailNickname,Location
            ${{steps.parse.outputs.firstName}}, ${{steps.parse.outputs.lastName}}, ${{steps.parse.outputs.jobTitle}}, ${{steps.parse.outputs.phoneNumber}}, $DisplayName, $MailNickname, ${{steps.parse.outputs.location}}
            "@

            $csvContent = $csvContent -replace "_No response_", ""

            $csvContent | Out-File -FilePath "docs/IT/scripts/NewAccounts.csv" -Encoding utf8
            Write-Host "Created CSV file with user data"
            Get-Content "docs/IT/scripts/NewAccounts.csv"
         shell: pwsh

       - name: Install Microsoft Graph PowerShell Module
         # This step installs the Microsoft Graph PowerShell module to interact with Azure AD
         run: |
           Install-Module Microsoft.Graph -Force -AllowClobber -Scope CurrentUser
           Write-Host "Microsoft Graph Powershell Module installed"
         shell: pwsh

       - name: Run onBoarding script and create User Account
         run: |
           # Get Azure credentials from secrets
           $ClientId = "${{ secrets.AZURE_CLIENT_ID }}"
           $ClientSecret = "${{ secrets.AZURE_CLIENT_SECRET }}" | ConvertTo-SecureString -AsPlainText -Force
           $TenantId = "${{ secrets.AZURE_TENANT_ID }}"

           # Create credential object and connect
           $Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)

           Write-Host "Connected to Microsoft Graph"
           Get-MgContext

           # Run the onboarding script
           .\docs\IT\scripts\onboardingNewUser.ps1
         shell: pwsh

       - name: Update Issue with Status
         uses: actions/github-script@v7
         with:
           script: |
             const { firstName, lastName, location, vpnAccess, jobTitle, phoneNumber } = {
               firstName: '${{ steps.parse.outputs.firstName }}',
               lastName: '${{ steps.parse.outputs.lastName }}',
               location: '${{ steps.parse.outputs.location }}',
               vpnAccess: '${{ steps.parse.outputs.VPNAccess }}',
               jobTitle: '${{ steps.parse.outputs.jobTitle }}',
               phoneNumber: '${{ steps.parse.outputs.phoneNumber }}'
             };

             await github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: "Onboarding of new User Finished!"
             });
