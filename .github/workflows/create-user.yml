name: Create New User from Issue Form # Name for defining the workflow

on: # Trigger the workflow when an issue is opened
  issues:
    types: [opened, labeled]

permissions:
  issues: write
  contents: read

jobs: # Make a create-user job that runs on the latest version of windows
  create-user:
    runs-on: windows-latest
    outputs:
      firstName: ${{ steps.parse.outputs.firstName }}
      lastName: ${{ steps.parse.outputs.lastName }}
      location: ${{ steps.parse.outputs.location }}
      jobTitle: ${{ steps.parse.outputs.jobTitle }}
      phoneNumber: ${{ steps.parse.outputs.phoneNumber }}
    # Trigger if issue has "user" label OR if the issue title contains "[Create a New User]"
    if: contains(github.event.issue.title, '[Create a New User]:')

    steps: # The first step is to download all the repository code and use the checkout action for that download
       - name: Checkout repository
         uses: actions/checkout@v4

       - name: Parse Issue Form Data # The second step is to parse the data from the form using github-script to run Javascript directly with the Github APIs
         id: parse
         uses: actions/github-script@v7
         with:
          script: |
            const issueBody = context.payload.issue.body; // Get the body and text of the issue generated when it's created
            console.log("Issue body:", issueBody);

            const parseFormField = (body, fieldName) => { // Look for ### FieldName followed by content until the next ###, double newline, or end of string
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)\\s*(?=\\n###|\\n\\n|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };

            const parseDropDown = (body, fieldName) => { // Look for ### FieldName followed by content until the next ###, double newline, or end of string
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)\\s*(?=\\n###|\\n\\n|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };

            const parseCheckboxes = (body, fieldName) => { // Looks for ### FieldName followed by a checked checkbox - [x] and captures that option
              const regex = new RegExp(`### ${fieldName}[\\s\\S]*?\\n- \\[x\\] (.+?)\\s*(?=\\n###|\\n\\n|\\n- \\[|$)`, 'i');
              const match = body.match(regex);
              return match ? match[1].trim() : 'No';
            };

            const firstName = parseFormField(issueBody, 'First Name'); // Parse the form fields from the issue body
            const lastName = parseFormField(issueBody, 'Last Name');
            const location = parseDropDown(issueBody, 'Location');
            const jobTitle = parseFormField(issueBody, 'Job Title');
            const phoneNumber = parseFormField(issueBody, 'Phone Number');

            core.setOutput('firstName', firstName); // setOutput is used to pass the data into key-value pairs that can be accessed in later steps
            core.setOutput('lastName', lastName);
            core.setOutput('location', location);
            core.setOutput('jobTitle', jobTitle);
            core.setOutput('phoneNumber', phoneNumber);

            // Validate required fields
            const missingFields = [];
            if (!firstName) missingFields.push('First Name');
            if (!lastName) missingFields.push('Last Name');
            if (!location) missingFields.push('Location');

            if (missingFields.length > 0) {
              core.setFailed(`Missing required fields: ${missingFields.join(', ')}`);
            }

       - name: Install Microsoft Graph PowerShell Module
         # This step installs the Microsoft Graph PowerShell module to interact with Azure AD
         run: |
           .\docs\IT\scripts\install-GraphModules.ps1
         shell: pwsh

       - name: Check Microsoft 365 Business Standard License Availability
         id: license-check
         env:
           AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
           AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
           AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
         run: |
          .\docs\IT\scripts\Check-Available-Licenses.ps1
         shell: pwsh

       - name: Display User's Information for Review
         uses: actions/github-script@v7
         with:
           script: | # Fixed indentation
             const { firstName, lastName, location, jobTitle, phoneNumber } = {
               firstName: '${{ steps.parse.outputs.firstName }}',
               lastName: '${{ steps.parse.outputs.lastName }}',
               location: '${{ steps.parse.outputs.location }}',
               jobTitle: '${{ steps.parse.outputs.jobTitle }}',
               phoneNumber: '${{ steps.parse.outputs.phoneNumber }}',
             };

             const availableLicenses = '${{ steps.license-check.outputs.AVAILABLE_LICENSES }}'; // Add this line

             const displayName = `${firstName} ${lastName}`;
             const mailNickname = `${firstName.split(' ')[0].toLowerCase()}.${lastName.split(' ').pop().toLowerCase()}`;
             const email = `${mailNickname}@oxmiq.ai`;

             await github.rest.issues.createComment({ // Fixed typo: isssues -> issues
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo, // Added missing comma
               body: `## User Creation Request Summary

              An Account will be generated with the following details:
              - **First Name**: ${firstName}
              - **Last Name**: ${lastName}
              - **Location**: ${location}
              - **Job Title**: ${jobTitle}
              - **Phone Number**: ${phoneNumber}
              - **Display Name**: ${displayName}
              - **Email**: ${email}
              - **Default Password**: "Password123"(change at first login)
              - **Account Enabled**: Yes
              - **License to be Assigned**: Microsoft 365 Business Standard (${availableLicenses} available)

              **Waiting on Admin Approval to create user**
              `
              });

  add-user-to-365:
    runs-on: windows-latest
    environment: user-creation
    needs: create-user
    steps:
       - name: Checkout repository  # ‚ö†Ô∏è ADD THIS
         uses: actions/checkout@v4

       - name: Create a CSV File with the User Details
         run: |
            $FirstName = "${{needs.create-user.outputs.firstName}}"
            $LastName = "${{needs.create-user.outputs.lastName}}"
            $JobTitle = "${{needs.create-user.outputs.jobTitle}}"
            $PhoneNumber = "${{needs.create-user.outputs.phoneNumber}}"
            $UsageLocation = "${{needs.create-user.outputs.location}}"

            $DisplayName = "$FirstName $LastName"

            $FirstNameFirstWord = ("$FirstName" -split '\s+')[0].ToLower()
            $LastNameLastWord = ("$LastName" -split '\s+')[-1].ToLower()
            $MailNickname = "$FirstNameFirstWord.$LastNameLastWord"

            $UserPrincipalName = "$FirstNameFirstWord.$LastNameLastWord@oxmiq.ai"

            $csvContent = @"
            FirstName,LastName,JobTitle,PhoneNumber,DisplayName,MailNickname,UsageLocation,UserPrincipalName
            $FirstName,$LastName,$JobTitle,$PhoneNumber,$DisplayName,$MailNickname,$UsageLocation,$UserPrincipalName
            "@

            $csvContent = $csvContent -replace "_No response_", ""

            $csvContent | Out-File -FilePath "docs/IT/scripts/NewAccounts.csv" -Encoding utf8
            Write-Host "‚úÖ Created CSV file with user data"
            Write-Host "üìÑ CSV Content:"
            Get-Content "docs/IT/scripts/NewAccounts.csv"
         shell: pwsh



       - name: Run onBoarding script and create User Account
         run: |
           Write-Host "üöÄ Starting user account creation process..." -ForegroundColor Cyan

           # Get Azure credentials from secrets
           $ClientId = "${{ secrets.AZURE_CLIENT_ID }}"
           $ClientSecret = "${{ secrets.AZURE_CLIENT_SECRET }}" | ConvertTo-SecureString -AsPlainText -Force
           $TenantId = "${{ secrets.AZURE_TENANT_ID }}"

           # Create credential object and connect
           $Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)

           Write-Host "Connected to Microsoft Graph"

           Connect-MgGraph -ClientSecretCredential $Credential -TenantId $TenantId -NoWelcome

           # Run the onboarding script
           .\docs\IT\scripts\onboardingNewUser.ps1
         shell: pwsh

       - name: Update Issue with Status
         uses: actions/github-script@v7
         with:
           script: |
             const { firstName, lastName, location, jobTitle, phoneNumber } = {
               firstName: '${{ needs.create-user.outputs.firstName }}',
               lastName: '${{ needs.create-user.outputs.lastName }}',
               location: '${{ needs.create-user.outputs.location }}',
               jobTitle: '${{ needs.create-user.outputs.jobTitle }}',
               phoneNumber: '${{ needs.create-user.outputs.phoneNumber }}'
             };

             const displayName = `${firstName} ${lastName}`;
             const username = `${firstName.toLowerCase().split(' ')[0]}.${lastName.toLowerCase().split(' ').slice(-1)[0]}`;
             const email = `${username}@oxmiq.ai`;

             await github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: "Onboarding of new User Finished!"
             });

             await github.rest.issues.update({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               state: 'closed'
             });
